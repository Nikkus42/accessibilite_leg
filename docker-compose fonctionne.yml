volumes:
  geo-db-data:
  geoserver-data:
  auth-db-data:

services:
  db:
    image: kartoza/postgis
    container_name: access_leg_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - geo-db-data:/var/lib/postgresql
      - ./postgresql.conf:/var/lib/postgresql/data/postgresql.conf
      - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    ports:
      - "${POSTGRES_PORT}:5432"  # Port personnalisé pour PostgreSQL
    networks:
      - geonetwork
    restart: on-failure
    healthcheck:
        test: "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
        interval: 1m30s
        timeout: 10s
        retries: 3
        start_period: 1m

  authent_leg:
      image: postgres
      container_name: authent_leg_db
      environment:
        POSTGRES_DB: ${AUTH_POSTGRES_DB}
        POSTGRES_USER: ${AUTH_POSTGRES_USER}
        POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      volumes:
        - auth-db-data:/var/lib/postgresql/data
      ports:
        - "${AUTH_POSTGRES_PORT}:5432"  # Port personnalisé pour la base de données d'authentification
      networks:
        - geonetwork
      restart: on-failure
      healthcheck:
        test: "PGPASSWORD=${AUTH_POSTGRES_PASSWORD} pg_isready -h 127.0.0.1 -U ${AUTH_POSTGRES_USER} -d ${AUTH_POSTGRES_DB}"
        interval: 1m30s
        timeout: 10s
        retries: 3
        start_period: 1m

  geoserver:
    image: kartoza/geoserver
    container_name: geoserver
    environment:
      - GEOSERVER_DATA_DIR=/opt/geoserver/data_dir
      - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER}
      - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}      
    volumes:
      - geoserver-data:/opt/geoserver/data_dir
    ports:
      - "${GEOSERVER_PORT}:8080"  # Port personnalisé pour GeoServer
    depends_on:
      - db
    networks:
      - geonetwork
    restart: on-failure
    healthcheck:
        test: [ "CMD-SHELL", "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null -u $${GEOSERVER_ADMIN_USER}:$${GEOSERVER_ADMIN_PASSWORD} http://localhost:8080/geoserver/rest/about/version.xml" ]
        interval: 1m30s
        timeout: 10s
        retries: 3
        start_period: 1m
    
#  flask:
#    build: ./flask_app
#    container_name: flask_app
#    environment:
#      - DATABASE_URL=${FLASK_DATABASE_URL}
#    ports:
#      - "${FLASK_PORT}:5000"  # Port personnalisé pour Flask
#    depends_on:
#      - db
#      - authent_leg  
#    networks:
#      - geonetwork

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx_html:/usr/share/nginx/html
    ports:
      - "${NGINX_PORT}:80"  # Port personnalisé pour Nginx
    depends_on:
      - geoserver
#      - flask
    networks:
      - geonetwork

networks:
  geonetwork:
    driver: bridge

